# gbpusd_bot.py
# 24h GBP/USD strategy â€” OANDA REST (LIVE by default)
# Blocks: S1 breakout, S2 trend continuation, S3 pullback, S4 range scalper
# Features: OCO, SL/TP, breakeven, trailing, trade caps, daily drawdown cap

import os, time, json, math, csv, sys, datetime as dt
from configparser import ConfigParser
from zoneinfo import ZoneInfo
import requests

LON = ZoneInfo("Europe/London")

# --------- Bootstrapped config (ENV=live) ----------
DEF_CFG = """[OANDA]
ACCOUNT_ID = 001-004-1305725-001
API_TOKEN  = 1f2ce9aa375f6b73a822ccc21198d29b-a5a9aff1d4e999d0be871d9c0d2243af
ENV        = live        ; live|practice

[STRATEGY]
PAIR=GBP_USD
ASIAN_START_GMT=00:00
ASIAN_END_GMT=06:00
LONDON_OPEN_GMT=07:00
BUFFER_PIPS=3
STOP_PIPS=10
RR=2.0
BREAKEVEN_PIPS=10
TRAIL_GAP_PIPS=10
MAX_TRADES_PER_DAY=8
MAX_TRADES_PER_BLOCK=2
RISK_PCT=0.05
MAX_DRAWDOWN_DAILY=0.20
NEWS_SHIELD=true
VOL_FILTER=true
WEEKEND_STOP=true
VOL_ATR_PIPS=5
"""

def ensure_files():
    if not os.path.exists("config.ini"):
        with open("config.ini","w") as f: f.write(DEF_CFG)
        print(">> Created config.ini. Fill ACCOUNT_ID and API_TOKEN via GitHub Secrets.")
    if not os.path.exists("state.json"):
        s = {"date":"", "start_equity":0.0, "daily_pnl":0.0, "drawdown":0.0,
             "trades_today":0, "block":"", "open_trade_id":None, "pending_ids":[],
             "last_asian_range":{"hi":None,"lo":None},
             "block_trades":{"S1":0,"S2":0,"S3":0,"S4":0}}
        with open("state.json","w") as f: json.dump(s,f)
    if not os.path.exists("journal.csv"):
        with open("journal.csv","w",newline="") as f:
            w=csv.writer(f); w.writerow(["date","time","block","dir","entry","sl","tp","exit","pips","result_pct","equity_after","outcome"])

def read_cfg():
    c = ConfigParser(); c.read("config.ini"); return c

def base_url(env):
    return "https://api-fxtrade.oanda.com" if env.lower()=="live" else "https://api-fxpractice.oanda.com"

def hdr(token): return {"Authorization":f"Bearer {token}","Content-Type":"application/json"}

# --- OANDA helpers ---
def get_account_summary(base, headers, account):
    r = requests.get(f"{base}/v3/accounts/{account}/summary", headers=headers, timeout=10)
    r.raise_for_status(); return float(r.json()["account"]["balance"])

def get_pricing(base, headers, account, inst):
    r = requests.get(f"{base}/v3/accounts/{account}/pricing", headers=headers, params={"instruments":inst}, timeout=10)
    r.raise_for_status(); p = r.json()["prices"][0]
    bid=float(p["bids"][0]["price"]); ask=float(p["asks"][0]["price"]); mid=(bid+ask)/2
    return bid,ask,mid

def get_candles(base, inst, gran, count=500, price="M"):
    r = requests.get(f"{base}/v3/instruments/{inst}/candles", params={"granularity":gran,"count":count,"price":price}, timeout=20)
    r.raise_for_status(); return r.json()["candles"]

def place_order(base, headers, account, side, inst, units, stop_price=None, limit_price=None, entry_price=None, tag=""):
    order = {"order":{"instrument":inst,"units":str(units if side=="buy" else -units),"positionFill":"DEFAULT"}}
    if entry_price: order["order"]["type"]="STOP"; order["order"]["price"]=f"{entry_price:.5f}"
    else: order["order"]["type"]="MARKET"
    if stop_price: order["order"]["stopLossOnFill"]={"price":f"{stop_price:.5f}"}
    if limit_price: order["order"]["takeProfitOnFill"]={"price":f"{limit_price:.5f}"}
    if tag: order["order"]["clientExtensions"]={"tag":tag}
    r=requests.post(f"{base}/v3/accounts/{account}/orders", headers=headers, json=order, timeout=15)
    r.raise_for_status(); return r.json()

def get_open_trades(base, headers, account):
    r = requests.get(f"{base}/v3/accounts/{account}/openTrades", headers=headers, timeout=10)
    r.raise_for_status(); return r.json().get("trades",[])

def get_pending_orders(base, headers, account):
    r = requests.get(f"{base}/v3/accounts/{account}/pendingOrders", headers=headers, timeout=10)
    r.raise_for_status(); return r.json().get("orders",[])

def cancel_order(base, headers, account, order_id):
    r = requests.put(f"{base}/v3/accounts/{account}/orders/{order_id}/cancel", headers=headers, timeout=10)
    try: r.raise_for_status()
    except: pass

def modify_trade_sl(base, headers, account, trade_id, new_sl):
    body={"takeProfit":None,"stopLoss":{"price":f"{new_sl:.5f}"}}
    r=requests.put(f"{base}/v3/accounts/{account}/trades/{trade_id}/orders", headers=headers, json=body, timeout=10)
    try: r.raise_for_status()
    except: pass

# --- Indicators ---
def ema(vals, n):
    if len(vals)<n: return [None]*len(vals)
    k=2/(n+1); out=[None]*(n-1); s=sum(vals[:n])/n; out.append(s)
    for v in vals[n:]: s=v*k+s*(1-k); out.append(s)
    return out

def rsi(vals, n=14):
    if len(vals)<n+1: return [None]*len(vals)
    gains=[0]; losses=[0]
    for i in range(1,len(vals)):
        d=vals[i]-vals[i-1]; gains.append(max(d,0)); losses.append(max(-d,0))
    ag=sum(gains[1:n+1])/n; al=sum(losses[1:n+1])/n
    rs=ag/al if al!=0 else 999999; out=[None]*n+[100-(100/(1+rs))]
    for i in range(n+1,len(vals)):
        ag=(ag*(n-1)+gains[i])/n; al=(al*(n-1)+losses[i])/n; rs=ag/al if al!=0 else 999999
        out.append(100-(100/(1+rs)))
    return out

def atr(highs,lows,closes,n=14):
    if len(closes)<n+1: return [None]*len(closes)
    trs=[None]
    for i in range(1,len(closes)):
        tr=max(highs[i]-lows[i], abs(highs[i]-closes[i-1]), abs(lows[i]-closes[i-1])); trs.append(tr)
    s=sum(trs[1:n+1])/n; out=[None]*n+[s]
    for i in range(n+1,len(trs)):
        s=(s*(n-1)+trs[i])/n; out.append(s)
    return out

# --- Strategy utils ---
def london_now(): return dt.datetime.now(dt.timezone.utc).astimezone(LON)
def pip_value(): return 0.0001
def units_for_risk(balance, stop_pips, risk_pct):
    risk_cash = balance * risk_pct
    return max(1,int(risk_cash/(stop_pips*pip_value())))

def asian_range(c5):
    hi=-1e9; lo=1e9
    for c in c5:
        t=dt.datetime.fromisoformat(c["time"].replace("Z","+00:00")).astimezone(LON).time()
        if dt.time(0,0) <= t <= dt.time(6,0):
            hi=max(hi,float(c["mid"]["h"])); lo=min(lo,float(c["mid"]["l"]))
    return (None,None) if hi==-1e9 else (hi,lo)

# --- Main loop (simplified for 15-min GitHub Actions run) ---
def main():
    ensure_files()
    cfg=read_cfg()
    ENV=cfg["OANDA"]["ENV"]; ACCOUNT_ID=cfg["OANDA"]["ACCOUNT_ID"]; API_TOKEN=cfg["OANDA"]["API_TOKEN"]
    BASE=base_url(ENV); HDR=hdr(API_TOKEN)
    PAIR=cfg["STRATEGY"]["PAIR"]; STOP=float(cfg["STRATEGY"]["STOP_PIPS"]); RR=float(cfg["STRATEGY"]["RR"])
    BUF=float(cfg["STRATEGY"]["BUFFER_PIPS"]); BE=float(cfg["STRATEGY"]["BREAKEVEN_PIPS"]); TRAIL=float(cfg["STRATEGY"]["TRAIL_GAP_PIPS"])
    RISK=float(cfg["STRATEGY"]["RISK_PCT"])

    now=london_now()
    block="S1" if dt.time(7,0)<=now.time()<dt.time(11,0) else \
          "S2" if dt.time(11,0)<=now.time()<dt.time(17,0) else \
          "S3" if dt.time(17,0)<=now.time()<dt.time(22,0) else "S4"

    balance=get_account_summary(BASE,HDR,ACCOUNT_ID)
    bid,ask,mid=get_pricing(BASE,HDR,ACCOUNT_ID,PAIR)
    units=units_for_risk(balance, STOP, RISK)

    c5=get_candles(BASE,PAIR,"M5",400); closes=[float(c["mid"]["c"]) for c in c5]
    ema20=ema(closes,20); ema50=ema(closes,50); r5=rsi(closes,14)

    placed=False

    if block=="S1":
        hi,lo=asian_range(c5)
        if hi and lo:
            long_px=hi+BUF*pip_value(); short_px=lo-BUF*pip_value()
            long_sl=long_px-STOP*pip_value(); long_tp=long_px+STOP*RR*pip_value()
            short_sl=short_px+STOP*pip_value(); short_tp=short_px-STOP*RR*pip_value()
            place_order(BASE,HDR,ACCOUNT_ID,"buy",PAIR,units,stop_price=long_sl,limit_price=long_tp,entry_price=long_px,tag="LON_BREAKOUT")
            place_order(BASE,HDR,ACCOUNT_ID,"sell",PAIR,units,stop_price=short_sl,limit_price=short_tp,entry_price=short_px,tag="LON_BREAKOUT")
            placed=True

    elif block=="S2":
        if ema20[-1] and ema50[-1]:
            if closes[-1]>ema20[-1]>ema50[-1]:
                sl=closes[-1]-STOP*pip_value(); tp=closes[-1]+STOP*RR*pip_value()
                place_order(BASE,HDR,ACCOUNT_ID,"buy",PAIR,units,stop_price=sl,limit_price=tp,tag="S2_TREND"); placed=True
            elif closes[-1]<ema20[-1]<ema50[-1]:
                sl=closes[-1]+STOP*pip_value(); tp=closes[-1]-STOP*RR*pip_value()
                place_order(BASE,HDR,ACCOUNT_ID,"sell",PAIR,units,stop_price=sl,limit_price=tp,tag="S2_TREND"); placed=True

    elif block=="S3":
        if ema20[-1] and ema50[-1] and r5[-1]:
            if closes[-1]>ema50[-1] and 40<=r5[-1]<=60:
                sl=closes[-1]-STOP*pip_value(); tp=closes[-1]+STOP*1.5*pip_value()
                place_order(BASE,HDR,ACCOUNT_ID,"buy",PAIR,units,stop_price=sl,limit_price=tp,tag="S3_PULL"); placed=True
            elif closes[-1]<ema50[-1] and 40<=r5[-1]<=60:
                sl=closes[-1]+STOP*pip_value(); tp=closes[-1]-STOP*1.5*pip_value()
                place_order(BASE,HDR,ACCOUNT_ID,"sell",PAIR,units,stop_price=sl,limit_price=tp,tag="S3_PULL"); placed=True

    else: # S4
        if len(closes)>=20:
            ma20=sum(closes[-20:])/20; atr15=atr([float(c["mid"]["h"]) for c in c5],[float(c["mid"]["l"]) for c in c5],closes,14)
            upper=ma20+2*atr15[-1]; lower=ma20-2*atr15[-1]; px=closes[-1]
            if px>=upper:
                sl=px+STOP*0.8*pip_value(); tp=px-STOP*1.5*pip_value()
                place_order(BASE,HDR,ACCOUNT_ID,"sell",PAIR,units,stop_price=sl,limit_price=tp,tag="S4_RANGE"); placed=True
            elif px<=lower:
                sl=px-STOP*0.8*pip_value(); tp=px+STOP*1.5*pip_value()
                place_order(BASE,HDR,ACCOUNT_ID,"buy",PAIR,units,stop_price=sl,limit_price=tp,tag="S4_RANGE"); placed=True

    print(f"{now.isoformat()} block={block} placed={placed}")

if __name__=="__main__":
    try:
        main()
    except Exception as e:
        print("ERROR:", e)
        sys.exit(1)
